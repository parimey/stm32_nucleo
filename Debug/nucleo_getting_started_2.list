
nucleo_getting_started_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003198  08003198  00004198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b0  080031b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b0  080031b0  000041b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031b8  080031b8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000000c  080031cc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080031cc  00005558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf7a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca9  00000000  00000000  00010fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00012c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078b  00000000  00000000  00013638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c7c  00000000  00000000  00013dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8c6  00000000  00000000  00034a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c715c  00000000  00000000  00042305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  001094a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0010bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003180 	.word	0x08003180

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003180 	.word	0x08003180

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fae2 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8de 	bl	80006c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f884 	bl	8000610 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f8ac 	bl	8000664 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // LED_ON
 800050c:	2201      	movs	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	4808      	ldr	r0, [pc, #32]	@ (8000534 <main+0x40>)
 8000512:	f000 fde5 	bl	80010e0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);//delay_in_ms
 8000516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051a:	f000 fb43 	bl	8000ba4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);//LED_OFF
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	4804      	ldr	r0, [pc, #16]	@ (8000534 <main+0x40>)
 8000524:	f000 fddc 	bl	80010e0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);//delay_in_ms
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 fb3a 	bl	8000ba4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // LED_ON
 8000530:	bf00      	nop
 8000532:	e7eb      	b.n	800050c <main+0x18>
 8000534:	40020400 	.word	0x40020400

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	@ 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fded 	bl	8003126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a28      	ldr	r2, [pc, #160]	@ (8000608 <SystemClock_Config+0xd0>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a22      	ldr	r2, [pc, #136]	@ (800060c <SystemClock_Config+0xd4>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000598:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800059c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ac:	23a8      	movs	r3, #168	@ 0xa8
 80005ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fd55 	bl	8002070 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 f926 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2105      	movs	r1, #5
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 feca 	bl	8001388 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fa:	f000 f90f 	bl	800081c <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3750      	adds	r7, #80	@ 0x50
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_USART3_UART_Init+0x50>)
 8000618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <MX_USART3_UART_Init+0x4c>)
 8000648:	f001 ffb0 	bl	80025ac <HAL_UART_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000652:	f000 f8e3 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028
 8000660:	40004800 	.word	0x40004800

08000664 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800066a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800066e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000672:	2206      	movs	r2, #6
 8000674:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000678:	2202      	movs	r2, #2
 800067a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000684:	2202      	movs	r2, #2
 8000686:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800068a:	2201      	movs	r2, #1
 800068c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800069c:	2201      	movs	r2, #1
 800069e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006a8:	f000 fd33 	bl	8001112 <HAL_PCD_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80006b2:	f000 f8b3 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000070 	.word	0x20000070

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	@ 0x30
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	4b4c      	ldr	r3, [pc, #304]	@ (800080c <MX_GPIO_Init+0x14c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a4b      	ldr	r2, [pc, #300]	@ (800080c <MX_GPIO_Init+0x14c>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b49      	ldr	r3, [pc, #292]	@ (800080c <MX_GPIO_Init+0x14c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	4b45      	ldr	r3, [pc, #276]	@ (800080c <MX_GPIO_Init+0x14c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a44      	ldr	r2, [pc, #272]	@ (800080c <MX_GPIO_Init+0x14c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b42      	ldr	r3, [pc, #264]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b3e      	ldr	r3, [pc, #248]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a3d      	ldr	r2, [pc, #244]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a36      	ldr	r2, [pc, #216]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_GPIO_Init+0x14c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b30      	ldr	r3, [pc, #192]	@ (800080c <MX_GPIO_Init+0x14c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2f      	ldr	r2, [pc, #188]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a28      	ldr	r2, [pc, #160]	@ (800080c <MX_GPIO_Init+0x14c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000784:	4822      	ldr	r0, [pc, #136]	@ (8000810 <MX_GPIO_Init+0x150>)
 8000786:	f000 fcab 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2140      	movs	r1, #64	@ 0x40
 800078e:	4821      	ldr	r0, [pc, #132]	@ (8000814 <MX_GPIO_Init+0x154>)
 8000790:	f000 fca6 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	481b      	ldr	r0, [pc, #108]	@ (8000818 <MX_GPIO_Init+0x158>)
 80007ac:	f000 fb04 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007b0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_GPIO_Init+0x150>)
 80007ca:	f000 faf5 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <MX_GPIO_Init+0x154>)
 80007e6:	f000 fae7 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007ea:	2380      	movs	r3, #128	@ 0x80
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_GPIO_Init+0x154>)
 80007fe:	f000 fadb 	bl	8000db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	@ 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	40021800 	.word	0x40021800
 8000818:	40020800 	.word	0x40020800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	4a0f      	ldr	r2, [pc, #60]	@ (8000874 <HAL_MspInit+0x4c>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083c:	6453      	str	r3, [r2, #68]	@ 0x44
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	@ (80008fc <HAL_UART_MspInit+0x84>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d12c      	bne.n	80008f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a17      	ldr	r2, [pc, #92]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008e4:	2307      	movs	r3, #7
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <HAL_UART_MspInit+0x8c>)
 80008f0:	f000 fa62 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40004800 	.word	0x40004800
 8000900:	40023800 	.word	0x40023800
 8000904:	40020c00 	.word	0x40020c00

08000908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0a0      	sub	sp, #128	@ 0x80
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	225c      	movs	r2, #92	@ 0x5c
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fbfc 	bl	8003126 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000936:	d14e      	bne.n	80009d6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800093c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800093e:	2300      	movs	r3, #0
 8000940:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fe38 	bl	80015bc <HAL_RCCEx_PeriphCLKConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000952:	f7ff ff63 	bl	800081c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a20      	ldr	r2, [pc, #128]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000972:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000984:	230a      	movs	r3, #10
 8000986:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800098c:	4619      	mov	r1, r3
 800098e:	4815      	ldr	r0, [pc, #84]	@ (80009e4 <HAL_PCD_MspInit+0xdc>)
 8000990:	f000 fa12 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009a6:	4619      	mov	r1, r3
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <HAL_PCD_MspInit+0xdc>)
 80009aa:	f000 fa05 	bl	8000db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <HAL_PCD_MspInit+0xd8>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80009d6:	bf00      	nop
 80009d8:	3780      	adds	r7, #128	@ 0x80
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 f891 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	@ (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 fb4d 	bl	8003138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd29 	bl	80004f4 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab0:	080031c0 	.word	0x080031c0
  ldr r2, =_sbss
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab8:	20000558 	.word	0x20000558

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f931 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f808 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe98 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_InitTick+0x54>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_InitTick+0x58>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f93b 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00e      	b.n	8000b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d80a      	bhi.n	8000b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f000 f911 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4a06      	ldr	r2, [pc, #24]	@ (8000b60 <HAL_InitTick+0x5c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000554 	.word	0x20000554

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000554 	.word	0x20000554

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffde 	bl	8000b8c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e165      	b.n	80010a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8154 	bne.w	800109a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80ae 	beq.w	800109a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b5d      	ldr	r3, [pc, #372]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a5c      	ldr	r2, [pc, #368]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a58      	ldr	r2, [pc, #352]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	@ (80010c0 <HAL_GPIO_Init+0x308>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	@ (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x216>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	@ (80010c8 <HAL_GPIO_Init+0x310>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x212>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	@ (80010cc <HAL_GPIO_Init+0x314>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x20e>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <HAL_GPIO_Init+0x318>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x20a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80010d4 <HAL_GPIO_Init+0x31c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	@ (80010d8 <HAL_GPIO_Init+0x320>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x202>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x21c>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4935      	ldr	r1, [pc, #212]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <HAL_GPIO_Init+0x324>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	@ (80010dc <HAL_GPIO_Init+0x324>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <HAL_GPIO_Init+0x324>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae96 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40013800 	.word	0x40013800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020800 	.word	0x40020800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40021400 	.word	0x40021400
 80010d8:	40021800 	.word	0x40021800
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af02      	add	r7, sp, #8
 8001118:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e108      	b.n	8001336 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d106      	bne.n	8001144 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fbe2 	bl	8000908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2203      	movs	r2, #3
 8001148:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001152:	d102      	bne.n	800115a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f001 fd4c 	bl	8002bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7c1a      	ldrb	r2, [r3, #16]
 800116c:	f88d 2000 	strb.w	r2, [sp]
 8001170:	3304      	adds	r3, #4
 8001172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001174:	f001 fcde 	bl	8002b34 <USB_CoreInit>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2202      	movs	r2, #2
 8001182:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0d5      	b.n	8001336 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fd44 	bl	8002c1e <USB_SetCurrentMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0c6      	b.n	8001336 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e04a      	b.n	8001244 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3315      	adds	r3, #21
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3314      	adds	r3, #20
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	b298      	uxth	r0, r3
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	332e      	adds	r3, #46	@ 0x2e
 80011ea:	4602      	mov	r2, r0
 80011ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3318      	adds	r3, #24
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	331c      	adds	r3, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3320      	adds	r3, #32
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3324      	adds	r3, #36	@ 0x24
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	3301      	adds	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	429a      	cmp	r2, r3
 800124c:	d3af      	bcc.n	80011ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e044      	b.n	80012de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	791b      	ldrb	r3, [r3, #4]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3b5      	bcc.n	8001254 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7c1a      	ldrb	r2, [r3, #16]
 80012f0:	f88d 2000 	strb.w	r2, [sp]
 80012f4:	3304      	adds	r3, #4
 80012f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f8:	f001 fcde 	bl	8002cb8 <USB_DevInit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e013      	b.n	8001336 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7b1b      	ldrb	r3, [r3, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d102      	bne.n	800132a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f80a 	bl	800133e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fe99 	bl	8003066 <USB_DevDisconnect>

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	f043 0303 	orr.w	r3, r3, #3
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0cc      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b68      	ldr	r3, [pc, #416]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d90c      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b65      	ldr	r3, [pc, #404]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a58      	ldr	r2, [pc, #352]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a52      	ldr	r2, [pc, #328]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	4313      	orrs	r3, r2
 8001410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d044      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d119      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d003      	beq.n	8001446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001442:	2b03      	cmp	r3, #3
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e06f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e067      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b37      	ldr	r3, [pc, #220]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f023 0203 	bic.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4934      	ldr	r1, [pc, #208]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff fb88 	bl	8000b8c <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	e00a      	b.n	8001496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff fb84 	bl	8000b8c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e04f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 020c 	and.w	r2, r3, #12
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1eb      	bne.n	8001480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d20c      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	4313      	orrs	r3, r2
 800150c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800150e:	f000 fb7f 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001512:	4602      	mov	r2, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	490a      	ldr	r1, [pc, #40]	@ (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_RCC_ClockConfig+0x1c8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fae8 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00
 8001544:	40023800 	.word	0x40023800
 8001548:	08003198 	.word	0x08003198
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_RCC_GetHCLKFreq+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000

0800156c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001570:	f7ff fff0 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	4903      	ldr	r1, [pc, #12]	@ (8001590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	080031a8 	.word	0x080031a8

08001594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001598:	f7ff ffdc 	bl	8001554 <HAL_RCC_GetHCLKFreq>
 800159c:	4602      	mov	r2, r0
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	0b5b      	lsrs	r3, r3, #13
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	4903      	ldr	r1, [pc, #12]	@ (80015b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015aa:	5ccb      	ldrb	r3, [r1, r3]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	080031a8 	.word	0x080031a8

080015bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d010      	beq.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80015f4:	4b6f      	ldr	r3, [pc, #444]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015fa:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001602:	496c      	ldr	r1, [pc, #432]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001604:	4313      	orrs	r3, r2
 8001606:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001612:	2301      	movs	r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d010      	beq.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001622:	4b64      	ldr	r3, [pc, #400]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001628:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001630:	4960      	ldr	r1, [pc, #384]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001632:	4313      	orrs	r3, r2
 8001634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001640:	2301      	movs	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d017      	beq.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001650:	4b58      	ldr	r3, [pc, #352]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4955      	ldr	r1, [pc, #340]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001660:	4313      	orrs	r3, r2
 8001662:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800166e:	d101      	bne.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001670:	2301      	movs	r3, #1
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800168c:	4b49      	ldr	r3, [pc, #292]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800168e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	4946      	ldr	r1, [pc, #280]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800169c:	4313      	orrs	r3, r2
 800169e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016aa:	d101      	bne.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 808a 	beq.w	80017de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a38      	ldr	r2, [pc, #224]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80016e6:	4b34      	ldr	r3, [pc, #208]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a33      	ldr	r2, [pc, #204]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016f2:	f7ff fa4b 	bl	8000b8c <HAL_GetTick>
 80016f6:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016fa:	f7ff fa47 	bl	8000b8c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e278      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001718:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001720:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02f      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	429a      	cmp	r2, r3
 8001734:	d028      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001736:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800173e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001740:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001746:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d114      	bne.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fa15 	bl	8000b8c <HAL_GetTick>
 8001762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fa11 	bl	8000b8c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e240      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ee      	beq.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001794:	d114      	bne.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80017a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017aa:	4902      	ldr	r1, [pc, #8]	@ (80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
 80017b0:	e00c      	b.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40007000 	.word	0x40007000
 80017bc:	42470e40 	.word	0x42470e40
 80017c0:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a49      	ldr	r2, [pc, #292]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80017ca:	6093      	str	r3, [r2, #8]
 80017cc:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	4944      	ldr	r1, [pc, #272]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80017f0:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80017f2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00a      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001800:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4937      	ldr	r1, [pc, #220]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001810:	4313      	orrs	r3, r2
 8001812:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001822:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001828:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001830:	492e      	ldr	r1, [pc, #184]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001832:	4313      	orrs	r3, r2
 8001834:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d011      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001852:	4926      	ldr	r1, [pc, #152]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001854:	4313      	orrs	r3, r2
 8001856:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001862:	d101      	bne.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00a      	beq.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	491a      	ldr	r1, [pc, #104]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001884:	4313      	orrs	r3, r2
 8001886:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d011      	beq.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001898:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800189c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a4:	4911      	ldr	r1, [pc, #68]	@ (80018ec <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b4:	d101      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80018b6:	2301      	movs	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80018ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018c8:	f040 80ff 	bne.w	8001aca <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80018d2:	f7ff f95b 	bl	8000b8c <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018d8:	e00e      	b.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80018da:	f7ff f957 	bl	8000b8c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d907      	bls.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e188      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
 80018ec:	40023800 	.word	0x40023800
 80018f0:	424711e0 	.word	0x424711e0
 80018f4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018f8:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ea      	bne.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001920:	2b00      	cmp	r3, #0
 8001922:	d028      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d124      	bne.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800192c:	4b71      	ldr	r3, [pc, #452]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800192e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001932:	0c1b      	lsrs	r3, r3, #16
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	3301      	adds	r3, #1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800193e:	4b6d      	ldr	r3, [pc, #436]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001944:	0e1b      	lsrs	r3, r3, #24
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	431a      	orrs	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	431a      	orrs	r2, r3
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	061b      	lsls	r3, r3, #24
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	071b      	lsls	r3, r3, #28
 800196e:	4961      	ldr	r1, [pc, #388]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001970:	4313      	orrs	r3, r2
 8001972:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800198a:	d00a      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	d035      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019a0:	d130      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019a2:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80019b4:	4b4f      	ldr	r3, [pc, #316]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019ba:	0f1b      	lsrs	r3, r3, #28
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	431a      	orrs	r2, r3
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	071b      	lsls	r3, r3, #28
 80019e4:	4943      	ldr	r1, [pc, #268]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80019ec:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f2:	f023 021f 	bic.w	r2, r3, #31
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	493d      	ldr	r1, [pc, #244]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d029      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a18:	d124      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a1a:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	3301      	adds	r3, #1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a32:	0f1b      	lsrs	r3, r3, #28
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	431a      	orrs	r2, r3
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	071b      	lsls	r3, r3, #28
 8001a5c:	4925      	ldr	r1, [pc, #148]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d016      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	071b      	lsls	r3, r3, #28
 8001a96:	4917      	ldr	r1, [pc, #92]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f872 	bl	8000b8c <HAL_GetTick>
 8001aa8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001aac:	f7ff f86e 	bl	8000b8c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e09f      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001abe:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 8095 	bne.w	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f858 	bl	8000b8c <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ade:	e00f      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ae0:	f7ff f854 	bl	8000b8c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d908      	bls.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e085      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	42470068 	.word	0x42470068
 8001afc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b00:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b0c:	d0e8      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02b      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d127      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001b36:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	019b      	lsls	r3, r3, #6
 8001b52:	431a      	orrs	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	061b      	lsls	r3, r3, #24
 8001b64:	4928      	ldr	r1, [pc, #160]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b72:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4922      	ldr	r1, [pc, #136]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01d      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b9a:	d118      	bne.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	0e1b      	lsrs	r3, r3, #24
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	019b      	lsls	r3, r3, #6
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	4910      	ldr	r1, [pc, #64]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe ffda 	bl	8000b8c <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001bdc:	f7fe ffd6 	bl	8000b8c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e007      	b.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bfa:	d1ef      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	42470070 	.word	0x42470070

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b0ae      	sub	sp, #184	@ 0xb8
 8001c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c36:	4bcb      	ldr	r3, [pc, #812]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	f200 8206 	bhi.w	8002050 <HAL_RCC_GetSysClockFreq+0x440>
 8001c44:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c81 	.word	0x08001c81
 8001c50:	08002051 	.word	0x08002051
 8001c54:	08002051 	.word	0x08002051
 8001c58:	08002051 	.word	0x08002051
 8001c5c:	08001c89 	.word	0x08001c89
 8001c60:	08002051 	.word	0x08002051
 8001c64:	08002051 	.word	0x08002051
 8001c68:	08002051 	.word	0x08002051
 8001c6c:	08001c91 	.word	0x08001c91
 8001c70:	08002051 	.word	0x08002051
 8001c74:	08002051 	.word	0x08002051
 8001c78:	08002051 	.word	0x08002051
 8001c7c:	08001e81 	.word	0x08001e81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4bb9      	ldr	r3, [pc, #740]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001c86:	e1e7      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c88:	4bb8      	ldr	r3, [pc, #736]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c8e:	e1e3      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4bb4      	ldr	r3, [pc, #720]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d071      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4bae      	ldr	r3, [pc, #696]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001cb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	0159      	lsls	r1, r3, #5
 8001cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce0:	0150      	lsls	r0, r2, #5
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1a51      	subs	r1, r2, r1
 8001cea:	6439      	str	r1, [r7, #64]	@ 0x40
 8001cec:	4629      	mov	r1, r5
 8001cee:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001d00:	4649      	mov	r1, r9
 8001d02:	018b      	lsls	r3, r1, #6
 8001d04:	4641      	mov	r1, r8
 8001d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	018a      	lsls	r2, r1, #6
 8001d0e:	4641      	mov	r1, r8
 8001d10:	1a51      	subs	r1, r2, r1
 8001d12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001d14:	4649      	mov	r1, r9
 8001d16:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001d28:	4649      	mov	r1, r9
 8001d2a:	00cb      	lsls	r3, r1, #3
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d32:	4641      	mov	r1, r8
 8001d34:	00ca      	lsls	r2, r1, #3
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d42:	462b      	mov	r3, r5
 8001d44:	460a      	mov	r2, r1
 8001d46:	eb42 0303 	adc.w	r3, r2, r3
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d58:	4629      	mov	r1, r5
 8001d5a:	024b      	lsls	r3, r1, #9
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d62:	4621      	mov	r1, r4
 8001d64:	024a      	lsls	r2, r1, #9
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001d7c:	f7fe fa42 	bl	8000204 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d8a:	e067      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001da6:	2300      	movs	r3, #0
 8001da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001daa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001de0:	4649      	mov	r1, r9
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dea:	4641      	mov	r1, r8
 8001dec:	018a      	lsls	r2, r1, #6
 8001dee:	4641      	mov	r1, r8
 8001df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e0e:	4692      	mov	sl, r2
 8001e10:	469b      	mov	fp, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	eb1a 0303 	adds.w	r3, sl, r3
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e44:	2200      	movs	r2, #0
 8001e46:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e48:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e4e:	f7fe f9d9 	bl	8000204 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4613      	mov	r3, r2
 8001e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e5c:	4b41      	ldr	r3, [pc, #260]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e7e:	e0eb      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e80:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8c:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d06b      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e98:	4b32      	ldr	r3, [pc, #200]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	663b      	str	r3, [r7, #96]	@ 0x60
 8001eac:	2300      	movs	r3, #0
 8001eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8001eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	0159      	lsls	r1, r3, #5
 8001ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec6:	0150      	lsls	r0, r2, #5
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4621      	mov	r1, r4
 8001ece:	1a51      	subs	r1, r2, r1
 8001ed0:	61b9      	str	r1, [r7, #24]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	018b      	lsls	r3, r1, #6
 8001eea:	4651      	mov	r1, sl
 8001eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef0:	4651      	mov	r1, sl
 8001ef2:	018a      	lsls	r2, r1, #6
 8001ef4:	4651      	mov	r1, sl
 8001ef6:	ebb2 0801 	subs.w	r8, r2, r1
 8001efa:	4659      	mov	r1, fp
 8001efc:	eb63 0901 	sbc.w	r9, r3, r1
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f14:	4690      	mov	r8, r2
 8001f16:	4699      	mov	r9, r3
 8001f18:	4623      	mov	r3, r4
 8001f1a:	eb18 0303 	adds.w	r3, r8, r3
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	462b      	mov	r3, r5
 8001f22:	eb49 0303 	adc.w	r3, r9, r3
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f34:	4629      	mov	r1, r5
 8001f36:	024b      	lsls	r3, r1, #9
 8001f38:	4621      	mov	r1, r4
 8001f3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f3e:	4621      	mov	r1, r4
 8001f40:	024a      	lsls	r2, r1, #9
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f54:	f7fe f956 	bl	8000204 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f62:	e065      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x420>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f70:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	2200      	movs	r2, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f80:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f82:	2300      	movs	r3, #0
 8001f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	464b      	mov	r3, r9
 8001f8e:	f04f 0000 	mov.w	r0, #0
 8001f92:	f04f 0100 	mov.w	r1, #0
 8001f96:	0159      	lsls	r1, r3, #5
 8001f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f9c:	0150      	lsls	r0, r2, #5
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	1a51      	subs	r1, r2, r1
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	4649      	mov	r1, r9
 8001faa:	eb63 0301 	sbc.w	r3, r3, r1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	018b      	lsls	r3, r1, #6
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc6:	4651      	mov	r1, sl
 8001fc8:	018a      	lsls	r2, r1, #6
 8001fca:	4651      	mov	r1, sl
 8001fcc:	1a54      	subs	r4, r2, r1
 8001fce:	4659      	mov	r1, fp
 8001fd0:	eb63 0501 	sbc.w	r5, r3, r1
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	00eb      	lsls	r3, r5, #3
 8001fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe2:	00e2      	lsls	r2, r4, #3
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4643      	mov	r3, r8
 8001fea:	18e3      	adds	r3, r4, r3
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	464b      	mov	r3, r9
 8001ff0:	eb45 0303 	adc.w	r3, r5, r3
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002002:	4629      	mov	r1, r5
 8002004:	028b      	lsls	r3, r1, #10
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800200c:	4621      	mov	r1, r4
 800200e:	028a      	lsls	r2, r1, #10
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002018:	2200      	movs	r2, #0
 800201a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800201e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002022:	f7fe f8ef 	bl	8000204 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4613      	mov	r3, r2
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x458>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	0f1b      	lsrs	r3, r3, #28
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800203e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800204e:	e003      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800205c:	4618      	mov	r0, r3
 800205e:	37b8      	adds	r7, #184	@ 0xb8
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400

08002070 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e28d      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8083 	beq.w	8002196 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002090:	4b94      	ldr	r3, [pc, #592]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d019      	beq.n	80020d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800209c:	4b91      	ldr	r3, [pc, #580]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020a8:	4b8e      	ldr	r3, [pc, #568]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b8b      	ldr	r3, [pc, #556]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b88      	ldr	r3, [pc, #544]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b84      	ldr	r3, [pc, #528]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x124>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e25a      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x90>
 80020f2:	4b7c      	ldr	r3, [pc, #496]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7b      	ldr	r2, [pc, #492]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xcc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xb4>
 800210a:	4b76      	ldr	r3, [pc, #472]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b73      	ldr	r3, [pc, #460]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a72      	ldr	r2, [pc, #456]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xcc>
 8002124:	4b6f      	ldr	r3, [pc, #444]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6e      	ldr	r2, [pc, #440]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b6c      	ldr	r3, [pc, #432]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6b      	ldr	r2, [pc, #428]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fd22 	bl	8000b8c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fd1e 	bl	8000b8c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e21f      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xdc>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fd0e 	bl	8000b8c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe fd0a 	bl	8000b8c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e20b      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b57      	ldr	r3, [pc, #348]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x104>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06f      	beq.n	8002282 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021a2:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ae:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ba:	4b4a      	ldr	r3, [pc, #296]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b47      	ldr	r3, [pc, #284]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b44      	ldr	r3, [pc, #272]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b41      	ldr	r3, [pc, #260]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x186>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1d3      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4937      	ldr	r1, [pc, #220]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <HAL_RCC_OscConfig+0x278>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7fe fcb7 	bl	8000b8c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7fe fcb3 	bl	8000b8c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1b4      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4925      	ldr	r1, [pc, #148]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_RCC_OscConfig+0x278>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fc96 	bl	8000b8c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7fe fc92 	bl	8000b8c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e193      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d036      	beq.n	80022fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7fe fc76 	bl	8000b8c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe fc72 	bl	8000b8c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e173      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x234>
 80022c2:	e01b      	b.n	80022fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <HAL_RCC_OscConfig+0x27c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7fe fc5f 	bl	8000b8c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	e00e      	b.n	80022f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7fe fc5b 	bl	8000b8c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d907      	bls.n	80022f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e15c      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b8a      	ldr	r3, [pc, #552]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ea      	bne.n	80022d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8097 	beq.w	8002438 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b83      	ldr	r3, [pc, #524]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b7f      	ldr	r3, [pc, #508]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a7e      	ldr	r2, [pc, #504]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b7c      	ldr	r3, [pc, #496]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b79      	ldr	r3, [pc, #484]	@ (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b76      	ldr	r3, [pc, #472]	@ (8002520 <HAL_RCC_OscConfig+0x4b0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	@ (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fc1b 	bl	8000b8c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fc17 	bl	8000b8c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e118      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b6c      	ldr	r3, [pc, #432]	@ (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x31e>
 8002380:	4b66      	ldr	r3, [pc, #408]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002384:	4a65      	ldr	r2, [pc, #404]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	@ 0x70
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x358>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x340>
 8002396:	4b61      	ldr	r3, [pc, #388]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239a:	4a60      	ldr	r2, [pc, #384]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a2:	4b5e      	ldr	r3, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	4a5d      	ldr	r2, [pc, #372]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0x358>
 80023b0:	4b5a      	ldr	r3, [pc, #360]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	4a59      	ldr	r2, [pc, #356]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80023bc:	4b57      	ldr	r3, [pc, #348]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	4a56      	ldr	r2, [pc, #344]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fbdc 	bl	8000b8c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fbd8 	bl	8000b8c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0d7      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	4b4b      	ldr	r3, [pc, #300]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ee      	beq.n	80023d8 <HAL_RCC_OscConfig+0x368>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fbc6 	bl	8000b8c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fbc2 	bl	8000b8c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0c1      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	4b40      	ldr	r3, [pc, #256]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002430:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80ad 	beq.w	800259c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002442:	4b36      	ldr	r3, [pc, #216]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d145      	bne.n	80024e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b33      	ldr	r3, [pc, #204]	@ (8002524 <HAL_RCC_OscConfig+0x4b4>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fb96 	bl	8000b8c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe fb92 	bl	8000b8c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e093      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	3b01      	subs	r3, #1
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	071b      	lsls	r3, r3, #28
 80024ae:	491b      	ldr	r1, [pc, #108]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x4b4>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb67 	bl	8000b8c <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fb63 	bl	8000b8c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e064      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x452>
 80024e0:	e05c      	b.n	800259c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_RCC_OscConfig+0x4b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fb50 	bl	8000b8c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fb4c 	bl	8000b8c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e04d      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x480>
 800250e:	e045      	b.n	800259c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e040      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000
 8002524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_RCC_OscConfig+0x538>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d030      	beq.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d129      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d122      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800255e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d119      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d10f      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e042      	b.n	8002644 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f950 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	@ 0x24
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f82b 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b0c0      	sub	sp, #256	@ 0x100
 8002652:	af00      	add	r7, sp, #0
 8002654:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	ea40 0301 	orr.w	r3, r0, r1
 8002674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	431a      	orrs	r2, r3
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	431a      	orrs	r2, r3
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026a4:	f021 010c 	bic.w	r1, r1, #12
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026b2:	430b      	orrs	r3, r1
 80026b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c6:	6999      	ldr	r1, [r3, #24]
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	ea40 0301 	orr.w	r3, r0, r1
 80026d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b8f      	ldr	r3, [pc, #572]	@ (8002918 <UART_SetConfig+0x2cc>)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d005      	beq.n	80026ec <UART_SetConfig+0xa0>
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b8d      	ldr	r3, [pc, #564]	@ (800291c <UART_SetConfig+0x2d0>)
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d104      	bne.n	80026f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7fe ff52 	bl	8001594 <HAL_RCC_GetPCLK2Freq>
 80026f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026f4:	e003      	b.n	80026fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026f6:	f7fe ff39 	bl	800156c <HAL_RCC_GetPCLK1Freq>
 80026fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002708:	f040 810c 	bne.w	8002924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800270c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002716:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800271a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800271e:	4622      	mov	r2, r4
 8002720:	462b      	mov	r3, r5
 8002722:	1891      	adds	r1, r2, r2
 8002724:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002726:	415b      	adcs	r3, r3
 8002728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800272a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800272e:	4621      	mov	r1, r4
 8002730:	eb12 0801 	adds.w	r8, r2, r1
 8002734:	4629      	mov	r1, r5
 8002736:	eb43 0901 	adc.w	r9, r3, r1
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274e:	4690      	mov	r8, r2
 8002750:	4699      	mov	r9, r3
 8002752:	4623      	mov	r3, r4
 8002754:	eb18 0303 	adds.w	r3, r8, r3
 8002758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800275c:	462b      	mov	r3, r5
 800275e:	eb49 0303 	adc.w	r3, r9, r3
 8002762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002772:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800277a:	460b      	mov	r3, r1
 800277c:	18db      	adds	r3, r3, r3
 800277e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002780:	4613      	mov	r3, r2
 8002782:	eb42 0303 	adc.w	r3, r2, r3
 8002786:	657b      	str	r3, [r7, #84]	@ 0x54
 8002788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800278c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002790:	f7fd fd38 	bl	8000204 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b61      	ldr	r3, [pc, #388]	@ (8002920 <UART_SetConfig+0x2d4>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011c      	lsls	r4, r3, #4
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027bc:	415b      	adcs	r3, r3
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027c4:	4641      	mov	r1, r8
 80027c6:	eb12 0a01 	adds.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0b01 	adc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e4:	4692      	mov	sl, r2
 80027e6:	469b      	mov	fp, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	eb1a 0303 	adds.w	r3, sl, r3
 80027ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027f2:	464b      	mov	r3, r9
 80027f4:	eb4b 0303 	adc.w	r3, fp, r3
 80027f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002808:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800280c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	643b      	str	r3, [r7, #64]	@ 0x40
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	647b      	str	r3, [r7, #68]	@ 0x44
 800281e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002826:	f7fd fced 	bl	8000204 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4611      	mov	r1, r2
 8002830:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <UART_SetConfig+0x2d4>)
 8002832:	fba3 2301 	umull	r2, r3, r3, r1
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2264      	movs	r2, #100	@ 0x64
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	1acb      	subs	r3, r1, r3
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002846:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <UART_SetConfig+0x2d4>)
 8002848:	fba3 2302 	umull	r2, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002854:	441c      	add	r4, r3
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002860:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002870:	415b      	adcs	r3, r3
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002878:	4641      	mov	r1, r8
 800287a:	1851      	adds	r1, r2, r1
 800287c:	6339      	str	r1, [r7, #48]	@ 0x30
 800287e:	4649      	mov	r1, r9
 8002880:	414b      	adcs	r3, r1
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002890:	4659      	mov	r1, fp
 8002892:	00cb      	lsls	r3, r1, #3
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289a:	4651      	mov	r1, sl
 800289c:	00ca      	lsls	r2, r1, #3
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	4642      	mov	r2, r8
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028ac:	464b      	mov	r3, r9
 80028ae:	460a      	mov	r2, r1
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028cc:	460b      	mov	r3, r1
 80028ce:	18db      	adds	r3, r3, r3
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d2:	4613      	mov	r3, r2
 80028d4:	eb42 0303 	adc.w	r3, r2, r3
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80028e2:	f7fd fc8f 	bl	8000204 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <UART_SetConfig+0x2d4>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2164      	movs	r1, #100	@ 0x64
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	3332      	adds	r3, #50	@ 0x32
 80028fe:	4a08      	ldr	r2, [pc, #32]	@ (8002920 <UART_SetConfig+0x2d4>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4422      	add	r2, r4
 8002912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002914:	e106      	b.n	8002b24 <UART_SetConfig+0x4d8>
 8002916:	bf00      	nop
 8002918:	40011000 	.word	0x40011000
 800291c:	40011400 	.word	0x40011400
 8002920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800292e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	1891      	adds	r1, r2, r2
 800293c:	6239      	str	r1, [r7, #32]
 800293e:	415b      	adcs	r3, r3
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
 8002942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002946:	4641      	mov	r1, r8
 8002948:	1854      	adds	r4, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb43 0501 	adc.w	r5, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	00eb      	lsls	r3, r5, #3
 800295a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800295e:	00e2      	lsls	r2, r4, #3
 8002960:	4614      	mov	r4, r2
 8002962:	461d      	mov	r5, r3
 8002964:	4643      	mov	r3, r8
 8002966:	18e3      	adds	r3, r4, r3
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800296c:	464b      	mov	r3, r9
 800296e:	eb45 0303 	adc.w	r3, r5, r3
 8002972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002982:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002992:	4629      	mov	r1, r5
 8002994:	008b      	lsls	r3, r1, #2
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299c:	4621      	mov	r1, r4
 800299e:	008a      	lsls	r2, r1, #2
 80029a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029a4:	f7fd fc2e 	bl	8000204 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4b60      	ldr	r3, [pc, #384]	@ (8002b30 <UART_SetConfig+0x4e4>)
 80029ae:	fba3 2302 	umull	r2, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	011c      	lsls	r4, r3, #4
 80029b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	1891      	adds	r1, r2, r2
 80029ce:	61b9      	str	r1, [r7, #24]
 80029d0:	415b      	adcs	r3, r3
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d8:	4641      	mov	r1, r8
 80029da:	1851      	adds	r1, r2, r1
 80029dc:	6139      	str	r1, [r7, #16]
 80029de:	4649      	mov	r1, r9
 80029e0:	414b      	adcs	r3, r1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f0:	4659      	mov	r1, fp
 80029f2:	00cb      	lsls	r3, r1, #3
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029fa:	4651      	mov	r1, sl
 80029fc:	00ca      	lsls	r2, r1, #3
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	4642      	mov	r2, r8
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a0c:	464b      	mov	r3, r9
 8002a0e:	460a      	mov	r2, r1
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a30:	4649      	mov	r1, r9
 8002a32:	008b      	lsls	r3, r1, #2
 8002a34:	4641      	mov	r1, r8
 8002a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	008a      	lsls	r2, r1, #2
 8002a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a42:	f7fd fbdf 	bl	8000204 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <UART_SetConfig+0x4e4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	@ 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	3332      	adds	r3, #50	@ 0x32
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <UART_SetConfig+0x4e4>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a76:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	1851      	adds	r1, r2, r1
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	4649      	mov	r1, r9
 8002a94:	414b      	adcs	r3, r1
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	00cb      	lsls	r3, r1, #3
 8002aa8:	4651      	mov	r1, sl
 8002aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aae:	4651      	mov	r1, sl
 8002ab0:	00ca      	lsls	r2, r1, #3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4642      	mov	r2, r8
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002abe:	464b      	mov	r3, r9
 8002ac0:	460a      	mov	r2, r1
 8002ac2:	eb42 0303 	adc.w	r3, r2, r3
 8002ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ad2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	008b      	lsls	r3, r1, #2
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aea:	4641      	mov	r1, r8
 8002aec:	008a      	lsls	r2, r1, #2
 8002aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002af2:	f7fd fb87 	bl	8000204 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <UART_SetConfig+0x4e4>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	2164      	movs	r1, #100	@ 0x64
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	3332      	adds	r3, #50	@ 0x32
 8002b0e:	4a08      	ldr	r2, [pc, #32]	@ (8002b30 <UART_SetConfig+0x4e4>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4422      	add	r2, r4
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b30:	51eb851f 	.word	0x51eb851f

08002b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b34:	b084      	sub	sp, #16
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	f107 001c 	add.w	r0, r7, #28
 8002b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d123      	bne.n	8002b96 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa9a 	bl	80030c4 <USB_CoreReset>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e01b      	b.n	8002bce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa8e 	bl	80030c4 <USB_CoreReset>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bc0:	e005      	b.n	8002bce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bce:	7fbb      	ldrb	r3, [r7, #30]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10b      	bne.n	8002bec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f043 0206 	orr.w	r2, r3, #6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bf8:	b004      	add	sp, #16
 8002bfa:	4770      	bx	lr

08002bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 0201 	bic.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d115      	bne.n	8002c6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002c4c:	200a      	movs	r0, #10
 8002c4e:	f7fd ffa9 	bl	8000ba4 <HAL_Delay>
      ms += 10U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	330a      	adds	r3, #10
 8002c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fa25 	bl	80030a8 <USB_GetMode>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d01e      	beq.n	8002ca2 <USB_SetCurrentMode+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c68:	d9f0      	bls.n	8002c4c <USB_SetCurrentMode+0x2e>
 8002c6a:	e01a      	b.n	8002ca2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002c7e:	200a      	movs	r0, #10
 8002c80:	f7fd ff90 	bl	8000ba4 <HAL_Delay>
      ms += 10U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	330a      	adds	r3, #10
 8002c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa0c 	bl	80030a8 <USB_GetMode>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <USB_SetCurrentMode+0x84>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2bc7      	cmp	r3, #199	@ 0xc7
 8002c9a:	d9f0      	bls.n	8002c7e <USB_SetCurrentMode+0x60>
 8002c9c:	e001      	b.n	8002ca2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e005      	b.n	8002cae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ca6:	d101      	bne.n	8002cac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cb8:	b084      	sub	sp, #16
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	e009      	b.n	8002cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	3340      	adds	r3, #64	@ 0x40
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b0e      	cmp	r3, #14
 8002cf0:	d9f2      	bls.n	8002cd8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11c      	bne.n	8002d34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e005      	b.n	8002d40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002d46:	461a      	mov	r2, r3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10d      	bne.n	8002d70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f968 	bl	8003034 <USB_SetDevSpeed>
 8002d64:	e008      	b.n	8002d78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d66:	2101      	movs	r1, #1
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f963 	bl	8003034 <USB_SetDevSpeed>
 8002d6e:	e003      	b.n	8002d78 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d70:	2103      	movs	r1, #3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f95e 	bl	8003034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d78:	2110      	movs	r1, #16
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8fa 	bl	8002f74 <USB_FlushTxFifo>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f924 	bl	8002fd8 <USB_FlushRxFifo>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da0:	461a      	mov	r2, r3
 8002da2:	2300      	movs	r3, #0
 8002da4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dac:	461a      	mov	r2, r3
 8002dae:	2300      	movs	r3, #0
 8002db0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db8:	461a      	mov	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e043      	b.n	8002e4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dda:	d118      	bne.n	8002e0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dee:	461a      	mov	r2, r3
 8002df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e013      	b.n	8002e20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e04:	461a      	mov	r2, r3
 8002e06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e008      	b.n	8002e20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e50:	461a      	mov	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d3b5      	bcc.n	8002dc4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e043      	b.n	8002ee6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e74:	d118      	bne.n	8002ea8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e013      	b.n	8002eba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e008      	b.n	8002eba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002eea:	461a      	mov	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d3b5      	bcc.n	8002e5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002f12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <USB_DevInit+0x2b8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d005      	beq.n	8002f48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f043 0208 	orr.w	r2, r3, #8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d107      	bne.n	8002f60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f6c:	b004      	add	sp, #16
 8002f6e:	4770      	bx	lr
 8002f70:	803c3800 	.word	0x803c3800

08002f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f8e:	d901      	bls.n	8002f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e01b      	b.n	8002fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	daf2      	bge.n	8002f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	019b      	lsls	r3, r3, #6
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fb8:	d901      	bls.n	8002fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e006      	b.n	8002fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d0f0      	beq.n	8002fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ff0:	d901      	bls.n	8002ff6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e018      	b.n	8003028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	daf2      	bge.n	8002fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2210      	movs	r2, #16
 8003006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003014:	d901      	bls.n	800301a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e006      	b.n	8003028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b10      	cmp	r3, #16
 8003024:	d0f0      	beq.n	8003008 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003080:	f023 0303 	bic.w	r3, r3, #3
 8003084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030dc:	d901      	bls.n	80030e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e01b      	b.n	800311a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	daf2      	bge.n	80030d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003106:	d901      	bls.n	800310c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e006      	b.n	800311a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d0f0      	beq.n	80030fa <USB_CoreReset+0x36>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <memset>:
 8003126:	4402      	add	r2, r0
 8003128:	4603      	mov	r3, r0
 800312a:	4293      	cmp	r3, r2
 800312c:	d100      	bne.n	8003130 <memset+0xa>
 800312e:	4770      	bx	lr
 8003130:	f803 1b01 	strb.w	r1, [r3], #1
 8003134:	e7f9      	b.n	800312a <memset+0x4>
	...

08003138 <__libc_init_array>:
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	4d0d      	ldr	r5, [pc, #52]	@ (8003170 <__libc_init_array+0x38>)
 800313c:	4c0d      	ldr	r4, [pc, #52]	@ (8003174 <__libc_init_array+0x3c>)
 800313e:	1b64      	subs	r4, r4, r5
 8003140:	10a4      	asrs	r4, r4, #2
 8003142:	2600      	movs	r6, #0
 8003144:	42a6      	cmp	r6, r4
 8003146:	d109      	bne.n	800315c <__libc_init_array+0x24>
 8003148:	4d0b      	ldr	r5, [pc, #44]	@ (8003178 <__libc_init_array+0x40>)
 800314a:	4c0c      	ldr	r4, [pc, #48]	@ (800317c <__libc_init_array+0x44>)
 800314c:	f000 f818 	bl	8003180 <_init>
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	2600      	movs	r6, #0
 8003156:	42a6      	cmp	r6, r4
 8003158:	d105      	bne.n	8003166 <__libc_init_array+0x2e>
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003160:	4798      	blx	r3
 8003162:	3601      	adds	r6, #1
 8003164:	e7ee      	b.n	8003144 <__libc_init_array+0xc>
 8003166:	f855 3b04 	ldr.w	r3, [r5], #4
 800316a:	4798      	blx	r3
 800316c:	3601      	adds	r6, #1
 800316e:	e7f2      	b.n	8003156 <__libc_init_array+0x1e>
 8003170:	080031b8 	.word	0x080031b8
 8003174:	080031b8 	.word	0x080031b8
 8003178:	080031b8 	.word	0x080031b8
 800317c:	080031bc 	.word	0x080031bc

08003180 <_init>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr

0800318c <_fini>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr
